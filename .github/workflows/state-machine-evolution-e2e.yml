name: State Machine Evolution E2E Test

on:
  push:
    branches: [main, develop]
    paths:
      - 'dsm_client/decentralized_state_machine/dsm/src/core/state_machine/**'
      - 'dsm_client/decentralized_state_machine/dsm/src/core/hashchain/**'
      - 'dsm_client/decentralized_state_machine/dsm/src/types/state_types.rs'
      - 'dsm_client/decentralized_state_machine/dsm/tests/**'
      - '.github/workflows/state-machine-evolution-e2e.yml'
      - '.github/state-machine-e2e-config.env'
  pull_request:
    branches: [main, develop]
    paths:
      - 'dsm_client/decentralized_state_machine/dsm/src/core/state_machine/**'
      - 'dsm_client/decentralized_state_machine/dsm/src/core/hashchain/**'
      - 'dsm_client/decentralized_state_machine/dsm/src/types/state_types.rs'
      - 'dsm_client/decentralized_state_machine/dsm/tests/**'
      - '.github/workflows/state-machine-evolution-e2e.yml'
      - '.github/state-machine-e2e-config.env'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode (comprehensive, targeted, stress)'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - targeted  
          - stress
      chain_length:
        description: 'Hash chain length for testing'
        required: false
        default: '100'
        type: string
      entropy_validation:
        description: 'Enable enhanced entropy validation'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: debug

jobs:
  # Infrastructure Setup
  infrastructure:
    name: Infrastructure Setup
    runs-on: ubuntu-latest
    outputs:
      config-hash: ${{ steps.config.outputs.hash }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        id: config
        run: |
          source .github/state-machine-e2e-config.env
          echo "hash=$(echo '${{ github.sha }}' | head -c 8)" >> $GITHUB_OUTPUT
          echo "DSM_TEST_MODE=${DSM_TEST_MODE:-${{ github.event.inputs.test_mode || 'comprehensive' }}}" >> $GITHUB_ENV
          echo "DSM_CHAIN_LENGTH=${DSM_CHAIN_LENGTH:-${{ github.event.inputs.chain_length || '100' }}}" >> $GITHUB_ENV
          echo "DSM_ENTROPY_VALIDATION=${DSM_ENTROPY_VALIDATION:-${{ github.event.inputs.entropy_validation || 'true' }}}" >> $GITHUB_ENV

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-state-machine-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-state-machine-
            ${{ runner.os }}-cargo-

      - name: Validate Environment
        run: |
          echo "✅ Infrastructure setup complete"
          echo "Test mode: $DSM_TEST_MODE"
          echo "Chain length: $DSM_CHAIN_LENGTH"
          echo "Entropy validation: $DSM_ENTROPY_VALIDATION"

  # Core State Machine Tests
  core-state-machine:
    name: Core State Machine Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    strategy:
      matrix:
        test-suite:
          - hash-chain-integrity
          - state-transitions
          - entropy-evolution
          - sparse-index
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-state-machine-${{ hashFiles('**/Cargo.lock') }}

      - name: Run State Machine E2E Tests
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=${{ matrix.test-suite }} --mode=${{ env.DSM_TEST_MODE }} --chain-length=${{ env.DSM_CHAIN_LENGTH }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: state-machine-${{ matrix.test-suite }}-results
          path: |
            dsm_client/test-results/state-machine-${{ matrix.test-suite }}-*.json
            dsm_client/test-results/state-machine-${{ matrix.test-suite }}-*.log

  # Hash Chain Evolution Tests  
  hash-chain-evolution:
    name: Hash Chain Evolution Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    strategy:
      matrix:
        scenario:
          - forward-only-evolution
          - sparse-index-verification
          - batch-processing
          - checkpoint-validation
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-state-machine-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Hash Chain Tests
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=hash-chain --scenario=${{ matrix.scenario }} --mode=${{ env.DSM_TEST_MODE }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hash-chain-${{ matrix.scenario }}-results
          path: |
            dsm_client/test-results/hash-chain-${{ matrix.scenario }}-*.json
            dsm_client/test-results/hash-chain-${{ matrix.scenario }}-*.log

  # JNI Integration Tests
  jni-integration:
    name: JNI Integration Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          targets: x86_64-linux-android

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: false

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-android-state-machine-${{ hashFiles('**/Cargo.lock') }}

      - name: Build JNI Bindings
        run: |
          cd dsm_client/decentralized_state_machine
          export ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}
          cargo build --target x86_64-linux-android --features jni

      - name: Test JNI State Machine Bindings
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=jni --mode=${{ env.DSM_TEST_MODE }}

      - name: Upload JNI Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: jni-state-machine-results
          path: |
            dsm_client/test-results/jni-state-machine-*.json
            dsm_client/test-results/jni-state-machine-*.log

  # Android Integration Tests
  android-integration:
    name: Android Integration Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Android Environment
        uses: android-actions/setup-android@v3

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          targets: x86_64-linux-android

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-android-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Android State Machine Components
        run: |
          cd dsm_client/android
          ./gradlew assembleDebug -Pandroid.testInstrumentationRunner.arguments.class=com.dsm.wallet.StateMachineEvolutionTest

      - name: Run Android State Machine Tests
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=android --mode=${{ env.DSM_TEST_MODE }}

      - name: Upload Android Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: android-state-machine-results
          path: |
            dsm_client/test-results/android-state-machine-*.json
            dsm_client/test-results/android-state-machine-*.log
            dsm_client/android/app/build/outputs/androidTest-results/

  # Performance and Stress Tests
  performance-stress:
    name: Performance and Stress Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    if: ${{ github.event.inputs.test_mode == 'stress' || github.event.inputs.test_mode == 'comprehensive' }}
    strategy:
      matrix:
        test-type:
          - hash-chain-performance
          - state-transition-throughput
          - entropy-evolution-stress
          - sparse-index-scalability
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-state-machine-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Performance Tests
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=performance --type=${{ matrix.test-type }} --chain-length=${{ env.DSM_CHAIN_LENGTH }}

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-${{ matrix.test-type }}-results
          path: |
            dsm_client/test-results/performance-${{ matrix.test-type }}-*.json
            dsm_client/test-results/performance-${{ matrix.test-type }}-*.log

  # Security and Cryptographic Tests
  security-crypto:
    name: Security and Cryptographic Tests
    runs-on: ubuntu-latest
    needs: infrastructure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Setup Rust Environment
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-state-machine-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Security Tests
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=security --mode=${{ env.DSM_TEST_MODE }} --entropy-validation=${{ env.DSM_ENTROPY_VALIDATION }}

      - name: Upload Security Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-crypto-results
          path: |
            dsm_client/test-results/security-*.json
            dsm_client/test-results/security-*.log

  # Instrumentation and Reporting
  instrumentation:
    name: Instrumentation and Reporting
    runs-on: ubuntu-latest
    needs: [core-state-machine, hash-chain-evolution, jni-integration, android-integration, security-crypto]
    if: always()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Configuration
        run: source .github/state-machine-e2e-config.env

      - name: Download All Test Results
        uses: actions/download-artifact@v3

      - name: Generate Comprehensive Report
        run: |
          cd dsm_client
          chmod +x test_state_machine_evolution_e2e.sh
          ./test_state_machine_evolution_e2e.sh --suite=instrumentation --mode=report

      - name: Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: state-machine-evolution-e2e-report
          path: |
            dsm_client/test-results/state-machine-evolution-e2e-report.json
            dsm_client/test-results/state-machine-evolution-e2e-report.html
            dsm_client/test-results/state-machine-evolution-coverage.json

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const reportPath = 'dsm_client/test-results/state-machine-evolution-e2e-report.json';
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const comment = `## 🔄 State Machine Evolution E2E Test Report
              
              **Test Summary:**
              - **Total Tests:** ${report.total_tests}
              - **Passed:** ${report.passed_tests} ✅
              - **Failed:** ${report.failed_tests} ${report.failed_tests > 0 ? '❌' : '✅'}
              - **Overall Success Rate:** ${report.success_rate}%
              
              **Component Results:**
              - **Hash Chain Integrity:** ${report.components.hash_chain.status} (${report.components.hash_chain.tests_passed}/${report.components.hash_chain.total_tests})
              - **State Transitions:** ${report.components.state_transitions.status} (${report.components.state_transitions.tests_passed}/${report.components.state_transitions.total_tests})
              - **Entropy Evolution:** ${report.components.entropy_evolution.status} (${report.components.entropy_evolution.tests_passed}/${report.components.entropy_evolution.total_tests})
              - **JNI Integration:** ${report.components.jni_integration.status} (${report.components.jni_integration.tests_passed}/${report.components.jni_integration.total_tests})
              - **Android Integration:** ${report.components.android_integration.status} (${report.components.android_integration.tests_passed}/${report.components.android_integration.total_tests})
              
              **Performance Metrics:**
              - **Hash Chain Performance:** ${report.performance.hash_chain_ops_per_sec} ops/sec
              - **State Transition Throughput:** ${report.performance.state_transition_throughput} transitions/sec
              - **Memory Usage:** ${report.performance.peak_memory_usage}MB
              
              **Security Validation:**
              - **Cryptographic Tests:** ${report.security.crypto_tests_passed}/${report.security.total_crypto_tests} passed
              - **Entropy Validation:** ${report.security.entropy_validation_status}
              - **Hash Chain Integrity:** ${report.security.hash_chain_integrity_status}
              
              ${report.failed_tests > 0 ? '⚠️ **Some tests failed. Please review the detailed results.**' : '🎉 **All tests passed successfully!**'}
              
              [📊 View Full Report](../actions/runs/${{ github.run_id }})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post comment:', error);
            }
