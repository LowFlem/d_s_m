name: Unilateral Transactions E2E Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - extended
          - stress
      platform_matrix:
        description: 'Platform matrix to test'
        required: false
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - extended

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  DSM_TEST_MODE: "e2e"

jobs:
  unilateral-transactions-e2e:
    name: Unilateral Transactions E2E - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 🔧 Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      - name: 📦 Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            dsm_storage_node/target
            dsm_client/decentralized_state_machine/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json

      - name: 📦 Install Node.js dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci

      - name: 🔧 Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
          sudo apt-get install -y android-tools-adb

      - name: 🔧 Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          # Install Android tools if needed for testing
          # brew install --cask android-platform-tools

      - name: 🏗️ Build DSM components
        run: |
          echo "Building storage nodes..."
          cd dsm_storage_node
          cargo build --release
          
          echo "Building DSM client..."
          cd ../dsm_client/decentralized_state_machine
          cargo build --release
          
          echo "Building frontend..."
          cd ../new_frontend
          npm run build

      - name: 🌐 Load E2E configuration
        run: |
          if [ -f .github/unilateral-e2e-config.env ]; then
            cat .github/unilateral-e2e-config.env >> $GITHUB_ENV
            echo "Loaded E2E configuration"
          else
            echo "Warning: E2E config file not found, using defaults"
          fi

      - name: 🚀 Start storage node cluster
        id: storage-setup
        working-directory: dsm_storage_node
        run: |
          echo "🚀 Starting DSM storage node cluster for unilateral testing..."
          
          # Generate test configurations
          for i in {1..5}; do
            port=$((8079 + i))
            cat > config-unilateral-test-node${i}.toml << EOF
          [node]
          id = "unilateral-test-node${i}"
          name = "DSM Unilateral Test Node ${i}"
          region = "test-region"
          public_key = "test-key-${i}"
          endpoint = "http://127.0.0.1:${port}"
          
          [network]
          listen_addr = "127.0.0.1"
          port = ${port}
          max_connections = 100
          
          [storage]
          type = "epidemic"
          data_dir = "test_data_node${i}"
          max_entries = 10000
          
          [unilateral]
          enable_inbox = true
          inbox_ttl_seconds = 3600
          max_inbox_size = 1000
          processing_interval_ms = 1000
          
          [cluster]
          enabled = true
          discovery_interval = 10
          sync_interval = 30
          fanout = 3
          
          [security]
          enable_tls = false
          
          [logging]
          level = "info"
          EOF
          done
          
          # Start nodes
          for i in {1..5}; do
            port=$((8079 + i))
            echo "Starting unilateral test node $i on port $port..."
            
            mkdir -p test_data_node${i}
            ./target/release/storage_node -c config-unilateral-test-node${i}.toml run > unilateral_node${i}.log 2>&1 &
            echo $! > unilateral_node${i}.pid
            sleep 2
          done
          
          # Wait for cluster formation
          echo "Waiting for cluster formation..."
          sleep 30
          
          # Verify nodes are healthy
          for i in {1..5}; do
            port=$((8079 + i))
            if curl -s "http://127.0.0.1:${port}/health" | grep -q "healthy"; then
              echo "✅ Node $i is healthy"
            else
              echo "❌ Node $i health check failed"
              exit 1
            fi
          done

      - name: 🧪 Run unilateral transactions E2E tests
        working-directory: dsm_client
        run: |
          echo "🧪 Running Unilateral Transactions E2E Pipeline..."
          
          # Set test level from input or default
          export TEST_LEVEL="${{ github.event.inputs.test_level || 'standard' }}"
          export PLATFORM_MATRIX="${{ github.event.inputs.platform_matrix || 'standard' }}"
          
          # Make script executable
          chmod +x test_unilateral_transactions_e2e.sh
          
          # Run the comprehensive E2E test
          ./test_unilateral_transactions_e2e.sh

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unilateral-transactions-e2e-results-${{ matrix.os }}
          path: |
            dsm_client/unilateral_*.json
            dsm_client/unilateral_*.html
            dsm_client/unilateral_*.log
            dsm_storage_node/unilateral_node*.log
          retention-days: 7

      - name: 🧹 Cleanup
        if: always()
        working-directory: dsm_storage_node
        run: |
          echo "🧹 Cleaning up storage nodes..."
          
          # Stop nodes
          for i in {1..5}; do
            if [ -f unilateral_node${i}.pid ]; then
              kill $(cat unilateral_node${i}.pid) 2>/dev/null || true
              rm -f unilateral_node${i}.pid
            fi
          done
          
          # Clean test data
          rm -rf test_data_node*
          rm -f config-unilateral-test-node*.toml
          rm -f unilateral_node*.log

      - name: 📝 Generate test summary
        if: always()
        run: |
          echo "## Unilateral Transactions E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ -f dsm_client/unilateral_e2e_summary.json ]; then
            # Parse results and add to summary
            echo "Results found - parsing summary..."
          else
            echo "| All Tests | ❌ Failed - No results |" >> $GITHUB_STEP_SUMMARY
          fi
