name: 🌐 Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dsm_client/new_frontend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'dsm_client/new_frontend/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  # ============================================================================
  # FRONTEND CODE QUALITY & SECURITY
  # ============================================================================
  frontend-quality:
    name: 🧹 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 🔍 TypeScript type checking
        working-directory: dsm_client/new_frontend
        run: npm run type-check
        
      - name: 📋 ESLint analysis
        working-directory: dsm_client/new_frontend
        run: npm run lint
        
      - name: 🎨 Prettier format check
        working-directory: dsm_client/new_frontend
        run: npm run format:check
        
      - name: 🔒 Security audit
        working-directory: dsm_client/new_frontend
        run: npm audit --audit-level high
        continue-on-error: true
        
      - name: 📊 Bundle size check
        working-directory: dsm_client/new_frontend
        run: npm run size-limit
        continue-on-error: true

  # ============================================================================
  # FRONTEND TESTING
  # ============================================================================
  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 🧪 Run unit tests
        working-directory: dsm_client/new_frontend
        run: npm run test:coverage
        
      - name: 🎭 Run component tests
        working-directory: dsm_client/new_frontend
        run: npm run test:components
        continue-on-error: true
        
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: dsm_client/new_frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            dsm_client/new_frontend/coverage/
            dsm_client/new_frontend/test-results.xml
          retention-days: 7

  # ============================================================================
  # DSM BRIDGE INTEGRATION TESTS
  # ============================================================================
  dsm-bridge-tests:
    name: 🔗 DSM Bridge Integration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 🔗 Test DSM bridge interface
        working-directory: dsm_client/new_frontend
        run: |
          echo "🔗 Testing DSM bridge TypeScript interfaces..."
          npm run test:bridge
          
      - name: 🧪 Test protocol binding chains
        working-directory: dsm_client/new_frontend
        run: |
          echo "🧪 Testing protocol binding chains..."
          
          # Check if bridge methods are properly typed
          npx tsc --noEmit src/types/dsm-bridge.ts
          
          # Test hook implementations
          npx tsc --noEmit src/hooks/useBridge.ts
          
      - name: 🔍 Test component integration
        working-directory: dsm_client/new_frontend
        run: |
          echo "🔍 Testing DSM component integration..."
          
          # Test screen components
          npm run test:screens
          
          # Test wallet functionality
          npm run test:wallet

  # ============================================================================
  # FRONTEND BUILD MATRIX
  # ============================================================================
  frontend-build:
    name: 🏗️ Frontend Build
    runs-on: ubuntu-latest
    needs: [frontend-quality, frontend-tests]
    
    strategy:
      matrix:
        build-type:
          - { name: "development", command: "build:dev", env: "development" }
          - { name: "production", command: "build:production", env: "production" }
          - { name: "android", command: "build:android", env: "android" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 🏗️ Build ${{ matrix.build-type.name }}
        working-directory: dsm_client/new_frontend
        env:
          NODE_ENV: ${{ matrix.build-type.env }}
        run: |
          echo "🏗️ Building frontend for ${{ matrix.build-type.name }}..."
          npm run ${{ matrix.build-type.command }}
          
      - name: 📊 Build analysis
        working-directory: dsm_client/new_frontend
        run: |
          echo "📊 Build Analysis for ${{ matrix.build-type.name }}:"
          echo "================================================="
          
          if [ -d "dist" ]; then
            echo "📂 Distribution size:"
            du -sh dist/
            
            echo ""
            echo "📄 Key files:"
            find dist -name "*.js" -o -name "*.css" -o -name "*.html" | head -10 | xargs ls -lh
            
            echo ""
            echo "🔍 Bundle composition:"
            if [ -f "dist/bundle-analyzer-report.html" ]; then
              echo "✅ Bundle analyzer report generated"
            fi
            
            # Check for DSM-specific files
            echo ""
            echo "🔗 DSM Protocol files:"
            find dist -name "*bridge*" -o -name "*dsm*" -o -name "*wallet*" | head -5
            
            # Check for critical files
            echo ""
            echo "✅ Critical file verification:"
            if [ -f "dist/index.html" ]; then
              echo "  ✅ index.html"
            else
              echo "  ❌ index.html missing"
            fi
            
            if find dist -name "*.js" | grep -q .; then
              echo "  ✅ JavaScript bundles"
            else
              echo "  ❌ JavaScript bundles missing"
            fi
            
            if find dist -name "*.css" | grep -q .; then
              echo "  ✅ CSS stylesheets"
            else
              echo "  ❌ CSS stylesheets missing"
            fi
          else
            echo "❌ Distribution directory not found"
            exit 1
          fi
          
      - name: 🧪 Smoke test build
        working-directory: dsm_client/new_frontend
        run: |
          echo "🧪 Running smoke tests on build..."
          
          # Test that critical files exist and are not empty
          if [ -f "dist/index.html" ] && [ -s "dist/index.html" ]; then
            echo "✅ index.html is valid"
          else
            echo "❌ index.html is invalid or empty"
            exit 1
          fi
          
          # Test that JS bundles are not empty
          for js_file in $(find dist -name "*.js" | head -3); do
            if [ -s "$js_file" ]; then
              echo "✅ $(basename $js_file) is valid"
            else
              echo "❌ $(basename $js_file) is empty"
              exit 1
            fi
          done
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-${{ matrix.build-type.name }}-${{ github.sha }}
          path: dsm_client/new_frontend/dist/
          retention-days: 7

  # ============================================================================
  # ANDROID ASSETS DEPLOYMENT
  # ============================================================================
  android-deployment:
    name: 📱 Android Assets Deployment
    runs-on: ubuntu-latest
    needs: [frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📥 Download Android build
        uses: actions/download-artifact@v4
        with:
          name: frontend-android-${{ github.sha }}
          path: dsm_client/new_frontend/dist/
          
      - name: 📦 Install deployment dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 🧹 Clean Android assets
        working-directory: dsm_client/new_frontend
        run: |
          echo "🧹 Cleaning Android assets directory..."
          rm -rf ../android/app/src/main/assets/*
          
      - name: 🚀 Deploy to Android assets
        working-directory: dsm_client/new_frontend
        run: |
          echo "🚀 Deploying frontend to Android assets..."
          npm run deploy:android-complete
          
      - name: ✅ Verify Android deployment
        run: |
          echo "✅ Verifying Android asset deployment..."
          
          ANDROID_ASSETS="dsm_client/android/app/src/main/assets"
          
          if [ -d "$ANDROID_ASSETS" ]; then
            echo "📊 Android assets deployed:"
            ls -la "$ANDROID_ASSETS"
            
            echo ""
            echo "🔍 Key file verification:"
            
            # Check index.html
            if [ -f "$ANDROID_ASSETS/index.html" ]; then
              echo "  ✅ index.html deployed"
              
              # Check if it contains DSM-specific content
              if grep -q "DSM Wallet" "$ANDROID_ASSETS/index.html"; then
                echo "  ✅ DSM Wallet content found"
              else
                echo "  ⚠️ DSM Wallet content missing from index.html"
              fi
            else
              echo "  ❌ index.html missing"
              exit 1
            fi
            
            # Check JavaScript bundles
            if find "$ANDROID_ASSETS" -name "*.js" | grep -q .; then
              echo "  ✅ JavaScript bundles deployed"
              echo "    📊 JS files:"
              find "$ANDROID_ASSETS" -name "*.js" | head -5 | xargs ls -lh
            else
              echo "  ❌ JavaScript bundles missing"
              exit 1
            fi
            
            # Check CSS files
            if find "$ANDROID_ASSETS" -name "*.css" | grep -q .; then
              echo "  ✅ CSS stylesheets deployed"
            else
              echo "  ⚠️ CSS stylesheets missing"
            fi
            
            # Check DSM bridge files
            if find "$ANDROID_ASSETS" -name "*bridge*" -o -name "*dsm*" | grep -q .; then
              echo "  ✅ DSM bridge files found"
            else
              echo "  ⚠️ DSM bridge files not found"
            fi
            
            echo ""
            echo "📏 Total asset size:"
            du -sh "$ANDROID_ASSETS"
            
          else
            echo "❌ Android assets directory not found"
            exit 1
          fi
          
      - name: 🔒 Security headers verification
        run: |
          echo "🔒 Verifying security headers in deployed assets..."
          
          INDEX_FILE="dsm_client/android/app/src/main/assets/index.html"
          
          if [ -f "$INDEX_FILE" ]; then
            # Check for CSP headers
            if grep -q "Content-Security-Policy" "$INDEX_FILE"; then
              echo "  ✅ Content Security Policy found"
            else
              echo "  ⚠️ Content Security Policy missing"
            fi
            
            # Check for other security headers
            if grep -q "X-Frame-Options\|X-Content-Type-Options" "$INDEX_FILE"; then
              echo "  ✅ Additional security headers found"
            else
              echo "  ⚠️ Additional security headers missing"
            fi
          fi
          
      - name: Upload Android assets
        uses: actions/upload-artifact@v3
        with:
          name: android-assets-deployed-${{ github.sha }}
          path: dsm_client/android/app/src/main/assets/
          retention-days: 30

  # ============================================================================
  # E2E FRONTEND TESTS
  # ============================================================================
  e2e-tests:
    name: 🎭 E2E Frontend Tests
    runs-on: ubuntu-latest
    needs: [android-deployment]
    if: github.ref == 'refs/heads/main'  # Only run on main due to resource cost
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dsm_client/new_frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: dsm_client/new_frontend
        run: npm ci
        
      - name: 📥 Download production build
        uses: actions/download-artifact@v4
        with:
          name: frontend-production-${{ github.sha }}
          path: dsm_client/new_frontend/dist/
          
      - name: 🚀 Start test server
        working-directory: dsm_client/new_frontend
        run: |
          npm run serve:dist &
          echo $! > server.pid
          
          # Wait for server to start
          sleep 10
          
          # Verify server is running
          curl -f http://localhost:3000 || exit 1
          
      - name: 🎭 Run E2E tests
        working-directory: dsm_client/new_frontend
        run: |
          npm run test:e2e
          
      - name: 🛑 Stop test server
        working-directory: dsm_client/new_frontend
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            dsm_client/new_frontend/e2e-results/
            dsm_client/new_frontend/screenshots/
          retention-days: 7

  # ============================================================================
  # FRONTEND PERFORMANCE ANALYSIS
  # ============================================================================
  performance-analysis:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest
    needs: [frontend-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download production build
        uses: actions/download-artifact@v4
        with:
          name: frontend-production-${{ github.sha }}
          path: dist/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 📊 Bundle size analysis
        run: |
          echo "📊 Bundle Size Analysis"
          echo "======================"
          
          echo "📏 Total bundle size:"
          du -sh dist/
          
          echo ""
          echo "📄 Individual file sizes:"
          find dist -name "*.js" -o -name "*.css" -exec ls -lh {} \; | sort -k5 -hr | head -10
          
          echo ""
          echo "🔍 Gzip simulation:"
          find dist -name "*.js" -o -name "*.css" | while read file; do
            original_size=$(stat -c%s "$file")
            gzip_size=$(gzip -c "$file" | wc -c)
            echo "$(basename "$file"): ${original_size} → ${gzip_size} bytes ($(echo "scale=1; $gzip_size * 100 / $original_size" | bc)%)"
          done | head -5
          
      - name: ⚡ Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: dsm_client/new_frontend/lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: 📊 Performance report
        run: |
          echo "📊 Performance Analysis Summary"
          echo "=============================="
          echo "✅ Bundle size analysis completed"
          echo "✅ Lighthouse performance audit completed"
          echo "📊 See artifacts for detailed reports"

  # ============================================================================
  # RELEASE PREPARATION
  # ============================================================================
  release:
    name: 📦 Frontend Release
    runs-on: ubuntu-latest
    needs: [android-deployment, performance-analysis]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: 📥 Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: frontend-*-${{ github.sha }}
          path: release-artifacts/
          merge-multiple: true
          
      - name: 📥 Download Android assets
        uses: actions/download-artifact@v4
        with:
          name: android-assets-deployed-${{ github.sha }}
          path: release-artifacts/android-assets/
          
      - name: 📦 Package release
        run: |
          mkdir -p release/frontend
          
          # Copy production build
          if [ -d "release-artifacts/frontend-production-${{ github.sha }}" ]; then
            cp -r "release-artifacts/frontend-production-${{ github.sha }}"/* release/frontend/
          fi
          
          # Copy Android assets
          mkdir -p release/android-assets
          if [ -d "release-artifacts/android-assets" ]; then
            cp -r release-artifacts/android-assets/* release/android-assets/
          fi
          
          # Create release metadata
          cat > release/FRONTEND_RELEASE.md << EOF
          # DSM Wallet Frontend Release
          
          **Commit:** ${{ github.sha }}
          **Date:** $(date)
          **Node Version:** ${{ env.NODE_VERSION }}
          
          ## 📦 Release Contents
          - Production frontend build
          - Android assets deployment
          - Performance analysis reports
          
          ## ✅ Quality Gates Passed
          - ✅ TypeScript type checking
          - ✅ ESLint analysis
          - ✅ Unit tests with coverage
          - ✅ Bundle size optimization
          - ✅ Security audit
          - ✅ Android deployment verified
          
          ## 📊 Build Statistics
          $(du -sh release/frontend)
          
          ## 🔐 Security Features
          - Content Security Policy headers
          - XSS protection
          - Secure DSM bridge interface
          - Post-quantum cryptography integration
          EOF
          
      - name: Upload release package
        uses: actions/upload-artifact@v3
        with:
          name: dsm-frontend-release-${{ github.sha }}
          path: release/
          retention-days: 90
          
      - name: 📊 Release summary
        run: |
          echo "📊 DSM Frontend Release Summary"
          echo "=============================="
          echo "📦 Frontend build: $(du -sh release/frontend | cut -f1)"
          echo "📱 Android assets: $(du -sh release/android-assets | cut -f1)"
          echo "📄 Release notes: release/FRONTEND_RELEASE.md"
          echo ""
          echo "✅ Frontend release package ready for deployment"
