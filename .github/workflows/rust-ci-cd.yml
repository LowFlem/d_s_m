name: 🦀 Rust Components CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dsm_storage_node/**'
      - 'dsm_client/decentralized_state_machine/**'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
  pull_request:
    branches: [ main ]
    paths:
      - 'dsm_storage_node/**'
      - 'dsm_client/decentralized_state_machine/**'
      - '**/Cargo.toml'
      - '**/Cargo.lock'

env:
  RUST_VERSION: '1.75.0'
  CARGO_TERM_COLOR: always

jobs:
  # ============================================================================
  # RUST CODE QUALITY & FORMATTING
  # ============================================================================
  rust-quality:
    name: 🧹 Code Quality & Security
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component:
          - { name: "Storage Node", path: "dsm_storage_node" }
          - { name: "DSM SDK", path: "dsm_client/decentralized_state_machine/dsm_sdk" }
          - { name: "DSM Core", path: "dsm_client/decentralized_state_machine/dsm" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            dsm_storage_node
            dsm_client/decentralized_state_machine
            
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler
          cargo install cargo-audit
          
      - name: 🧹 Format check
        working-directory: ${{ matrix.component.path }}
        run: cargo fmt --all -- --check
        
      - name: 📋 Clippy analysis
        working-directory: ${{ matrix.component.path }}
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: 🔒 Security audit
        working-directory: ${{ matrix.component.path }}
        run: cargo audit
        continue-on-error: true

  # ============================================================================
  # STORAGE NODE BUILD & TEST
  # ============================================================================
  storage-node:
    name: 🏪 Storage Node
    runs-on: ubuntu-latest
    needs: rust-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: dsm_storage_node
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler
          
      - name: 🧪 Run unit tests
        working-directory: dsm_storage_node
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/dsm_test
        run: |
          cargo test --verbose --all-features
          
      - name: 🏗️ Build release
        working-directory: dsm_storage_node
        run: |
          cargo build --release
          
      - name: 🧪 Integration tests
        working-directory: dsm_storage_node
        run: |
          # Test MPC genesis functionality
          cargo test --test mpc_genesis_integration_test --ignored -- --nocapture
          
      - name: 📊 Performance benchmarks
        working-directory: dsm_storage_node
        run: |
          cargo bench --no-run
          
      - name: 📦 Package binaries
        run: |
          mkdir -p artifacts/storage-node
          cp dsm_storage_node/target/release/dsm_storage_node artifacts/storage-node/
          cp dsm_storage_node/config*.toml artifacts/storage-node/
          
      - name: Upload storage node artifacts
        uses: actions/upload-artifact@v3
        with:
          name: storage-node-${{ github.sha }}
          path: artifacts/storage-node/
          retention-days: 7

  # ============================================================================
  # DSM SDK BUILD & JNI
  # ============================================================================
  dsm-sdk:
    name: 🛠️ DSM SDK & JNI
    runs-on: ubuntu-latest
    needs: rust-quality
    
    strategy:
      matrix:
        target:
          - { arch: "aarch64-linux-android", android-arch: "arm64-v8a" }
          - { arch: "armv7-linux-androideabi", android-arch: "armeabi-v7a" }
          - { arch: "x86_64-linux-android", android-arch: "x86_64" }
          - { arch: "i686-linux-android", android-arch: "x86" }
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target.arch }}
          
      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: '26.1.10909125'
          
      - name: Install cargo-ndk
        run: cargo install cargo-ndk
        
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: dsm_client/decentralized_state_machine
          
      - name: 🧪 Test SDK (host target)
        working-directory: dsm_client/decentralized_state_machine/dsm_sdk
        run: |
          cargo test --features jni --verbose
          
      - name: 🧪 Test determinism enforcement
        working-directory: dsm_client/decentralized_state_machine
        run: |
          echo "🔒 Testing without test-mock feature (production mode)"
          cargo test --workspace --verbose
          
          echo "🧪 Testing with test-mock feature (test mode)"
          cargo test --workspace --features test-mock --verbose
          
      - name: 🛡️ Verify no test logic in production
        working-directory: dsm_client/decentralized_state_machine
        run: |
          echo "🔍 Verifying test_mocks module is feature-gated"
          if grep -r "test_mocks" --include="*.rs" . | grep -v "#\[cfg" | grep -v "//"; then
            echo "❌ Found test_mocks usage not properly feature-gated!"
            exit 1
          fi
          echo "✅ Test isolation verified"
          
      - name: 🏗️ Build JNI library for ${{ matrix.target.android-arch }}
        working-directory: dsm_client/decentralized_state_machine/dsm_sdk
        run: |
          cargo ndk -t ${{ matrix.target.android-arch }} -o ../jniLibs build --release --features jni
          
      - name: 📊 Library analysis
        run: |
          echo "📊 JNI Library for ${{ matrix.target.android-arch }}:"
          find dsm_client/decentralized_state_machine/jniLibs/${{ matrix.target.android-arch }} -name "*.so" -exec ls -lh {} \;
          
      - name: Upload JNI artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jni-libs-${{ matrix.target.android-arch }}-${{ github.sha }}
          path: dsm_client/decentralized_state_machine/jniLibs/${{ matrix.target.android-arch }}/
          retention-days: 7

  # ============================================================================
  # PROTOCOL TESTS
  # ============================================================================
  protocol-tests:
    name: 🔗 Protocol Integration Tests
    runs-on: ubuntu-latest
    needs: [storage-node]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download storage node
        uses: actions/download-artifact@v3
        with:
          name: storage-node-${{ github.sha }}
          path: dsm_storage_node/target/release/
          
      - name: Setup test environment
        run: |
          chmod +x dsm_storage_node/target/release/dsm_storage_node
          
      - name: 🚀 Start storage node cluster
        working-directory: dsm_storage_node
        run: |
          # Start multiple nodes for testing
          ./target/release/dsm_storage_node --config config-production-node1.toml &
          ./target/release/dsm_storage_node --config config-production-node2.toml &
          ./target/release/dsm_storage_node --config config-production-node3.toml &
          
          sleep 10
          
          # Health check
          curl -f http://localhost:8080/health
          curl -f http://localhost:8081/health  
          curl -f http://localhost:8082/health
          
      - name: 🧪 MPC Genesis Tests
        working-directory: dsm_storage_node
        run: |
          bash run_mpc_integration_test.sh
          
      - name: 🧪 Protocol Binding Tests
        working-directory: dsm_storage_node
        run: |
          bash scripts/test_protocol_metrics_binding_chain.sh
          bash scripts/test_hashchain_binding_chain.sh
          bash scripts/test_external_commitments_binding_chain.sh
          
      - name: 🧪 Network Protocol Tests
        working-directory: dsm_storage_node
        run: |
          bash scripts/test_inbox_functionality.sh
          bash scripts/test_unilateral_inbox.sh

  # ============================================================================
  # PERFORMANCE & BENCHMARKS
  # ============================================================================
  performance:
    name: ⚡ Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [storage-node]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev libsqlite3-dev protobuf-compiler
          
      - name: ⚡ Storage Node Benchmarks
        working-directory: dsm_storage_node
        run: |
          cargo bench -- --output-format json | tee benchmark-results.json
          
      - name: ⚡ SDK Performance Tests
        working-directory: dsm_client/decentralized_state_machine/dsm_sdk
        run: |
          cargo bench -- --output-format json | tee sdk-benchmark-results.json
          
      - name: 📊 Performance Report
        run: |
          echo "📊 Performance Benchmark Summary"
          echo "================================"
          echo "Storage Node Benchmarks:"
          cat dsm_storage_node/benchmark-results.json | grep -o '"mean":[^}]*' || echo "No benchmarks available"
          echo ""
          echo "SDK Benchmarks:"  
          cat dsm_client/decentralized_state_machine/dsm_sdk/sdk-benchmark-results.json | grep -o '"mean":[^}]*' || echo "No benchmarks available"

  # ============================================================================
  # RELEASE PREPARATION
  # ============================================================================
  release:
    name: 📦 Release Preparation
    runs-on: ubuntu-latest
    needs: [protocol-tests, dsm-sdk]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: 📦 Collect JNI libraries
        run: |
          mkdir -p release/jniLibs
          
          # Combine all JNI architectures
          for arch in arm64-v8a armeabi-v7a x86_64 x86; do
            if [ -d "jni-libs-${arch}-${{ github.sha }}" ]; then
              cp -r "jni-libs-${arch}-${{ github.sha }}"/* release/jniLibs/
            fi
          done
          
          echo "📊 Combined JNI Libraries:"
          find release/jniLibs -name "*.so" -exec ls -lh {} \;
          
      - name: 📦 Package release
        run: |
          mkdir -p release/storage-node
          cp -r storage-node-${{ github.sha }}/* release/storage-node/
          
          # Create version info
          echo "DSM Protocol Release" > release/VERSION.txt
          echo "Commit: ${{ github.sha }}" >> release/VERSION.txt
          echo "Date: $(date)" >> release/VERSION.txt
          echo "Rust Version: ${{ env.RUST_VERSION }}" >> release/VERSION.txt
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dsm-rust-release-${{ github.sha }}
          path: release/
          retention-days: 30
          
      - name: 🏷️ Create Release Tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "🏷️ Creating release for tag: ${{ github.ref }}"
          # This would create a GitHub release with the artifacts
