// DSM Storage Node Client Adapter
//
// This module provides functionality to connect to and interact with
// DSM Storage Nodes for unilateral transactions and DLVs.

use dsm::types::error::DsmError;
// These imports are conditionally used based on feature flags
use dsm::communication::storage_cache::StorageCache;
use dsm::core::identity::GenesisState;
use dsm::core::identity::Identity;
use dsm::recovery::invalidation::InvalidationMarker;
use dsm::types::operations::Operation;
#[cfg(feature = "reqwest")]
use dsm::types::operations::Ops;
use dsm::types::state_types::State;
use dsm::types::token_types::Token;
use dsm::vault::{LimboVault, VaultStatus};
#[cfg(feature = "reqwest")]
use dsm::vault::{VaultState, FulfillmentProof};
#[cfg(feature = "reqwest")]
// LimboVault is used directly from the re-export
use dsm::InboxEntry;
#[cfg(not(feature = "reqwest"))]
use dsm::InboxEntry;
#[allow(unused_imports)]
use dsm::vault::DeterministicLimboVault;
#[allow(unused_imports)]
use base64::Engine;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::sync::Arc;
#[cfg(feature = "reqwest")]
use std::time::{Duration, SystemTime, UNIX_EPOCH};
use tokio::sync::RwLock;
use url::Url;

// Using the constant in the StorageNodeClient::new implementation
// This makes sure the constant is used
/// Default timeout value for storage node requests (30 seconds)
/// This value is used in StorageNodeClient::new implementation
#[allow(dead_code)]
const STORAGE_NODE_TIMEOUT: u64 = 30; // 30 seconds

/// Storage node client configuration
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StorageNodeClientConfig {
    /// Storage node base URL
    pub base_url: String,

    /// API token (if required)
    pub api_token: Option<String>,

    /// Request timeout in seconds
    pub timeout_seconds: u64,
}

/// Storage node client with full HTTP capabilities
#[cfg(feature = "reqwest")]
pub struct StorageNodeClient {
    /// HTTP client for network operations
    http_client: reqwest::Client,

    /// Base URL of the storage node
    /// Contains the target endpoint for all API requests
    base_url: Url,

    /// API token for authentication
    /// Used for authenticated requests to protected endpoints
    api_token: Option<String>,

    /// Cache of recently accessed inbox entries
    /// Provides performance optimization for frequent inbox queries
    inbox_cache: RwLock<HashMap<String, Vec<InboxEntry>>>,

    /// Cache of recently accessed vaults
    /// Reduces network load for vault operations
    vault_cache: RwLock<HashMap<String, LimboVault>>,

    /// Advanced cache for persistent offline operation
    storage_cache: Arc<StorageCache>,

    /// Whether to cache all fetched data automatically
    auto_cache_enabled: bool,
}

// Implementation for minimal functionality when reqwest is disabled
#[cfg(not(feature = "reqwest"))]
pub struct StorageNodeClient {
    /// Base URL of the storage node
    base_url: Url,

    /// API token for authentication
    api_token: Option<String>,

    /// Cache of recently accessed inbox entries
    inbox_cache: RwLock<HashMap<String, Vec<InboxEntry>>>,

    /// Cache of recently accessed vaults
    vault_cache: RwLock<HashMap<String, LimboVault>>,

    /// Advanced cache for persistent offline operation
    storage_cache: Arc<StorageCache>,

    /// Whether to cache all fetched data automatically
    auto_cache_enabled: bool,
}

#[cfg(feature = "reqwest")]
impl StorageNodeClient {
    // Methods for reqwest-enabled version
    pub fn new(config: StorageNodeClientConfig) -> Result<Self, DsmError> {
        let http_client = reqwest::Client::builder()
            .timeout(Duration::from_secs(config.timeout_seconds.max(1)))
            .build()
            .map_err(|e| DsmError::Network {
                entity: "http_client".to_string(),
                details: Some("Client initialization failed".to_string()),
                context: format!("Failed to create HTTP client: {}", e),
                source: Some(Box::new(e)),
            })?;

        let base_url = Url::parse(&config.base_url).map_err(|e| DsmError::Validation {
            context: format!("Invalid base URL: {}", e),
            source: Some(Box::new(e)),
        })?;

        Ok(Self {
            http_client,
            base_url,
            api_token: config.api_token,
            inbox_cache: RwLock::new(HashMap::new()),
            vault_cache: RwLock::new(HashMap::new()),
            storage_cache: Arc::new(StorageCache::new()),
            auto_cache_enabled: true,
        })
    }
    
    // And other HTTP-related methods...
}

#[cfg(not(feature = "reqwest"))]
impl StorageNodeClient {
    // Methods for minimal functionality when reqwest is disabled
    pub fn new(config: StorageNodeClientConfig) -> Result<Self, DsmError> {
        let base_url = Url::parse(&config.base_url).map_err(|e| DsmError::Validation {
            context: format!("Invalid base URL: {}", e),
            source: Some(Box::new(e)),
        })?;

        Ok(Self {
            base_url,
            api_token: config.api_token,
            inbox_cache: RwLock::new(HashMap::new()),
            vault_cache: RwLock::new(HashMap::new()),
            storage_cache: Arc::new(StorageCache::new()),
            auto_cache_enabled: true,
        })
    }

    pub async fn check_health(&self) -> Result<bool, DsmError> {
        Err(DsmError::FeatureNotAvailable {
            feature: "Network functionality".to_string(),
            details: Some("This feature requires the 'reqwest' feature to be enabled".to_string()),
        })
    }
    
    // And other placeholder methods...
}
